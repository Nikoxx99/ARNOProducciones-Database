type Query {
  Client(_id: ID): Client
  Clients(limit: Int): [Client]
  getActiveClients(city: Int): [ActiveClients]
  City(id: Int): City
  Cities(limit: Int): [City]
  Neighborhood(id: Int): Neighborhood
  Neighborhoods(limit: Int): [Neighborhood]
  Plan(id: Int): Plan
  Plans(limit: Int): [Plan]
  Technology(id: Int): Technology
  Technologies(limit: Int): [Technology]
}
type Client {
  _id: ID
  code: Int
  name: String
  dni: String
  address: String
  neighborhood: Neighborhood
  city: City
  phone: String
  plan: Plan
  wifi_ssid: String
  wifi_password: String
  technology: Technology
  mac_address: String
  comment: String
  operator: Int
  newModel: Int
}
type City {
  _id: ID
  id: Int
  name: String
  clients(limit: Int): [Client]
  neighborhoods: [Neighborhood]
  ip: String
  color: String
}
type Neighborhood {
  _id: ID
  id: Int
  name: String
  clients: [Client]
  cities: [City]
}
type Plan {
  _id: ID
  id: Int
  name: String
  mikrotik_name: String
  clients: [Client]
}
type Technology {
  _id: ID
  id: Int
  name: String
  clients: [Client]
}
type Error {
  path: String!
  message: String!
}
type SimpleResponse {
  success: Boolean!
  errors: [Error]
}
type Response {
  success: Boolean!
  token: String
  role: Int
  username: String
  errors: [Error]
}
type ClientStatus {
  status: Boolean
  address: String
  mac_address: String
  offlineTime: String
  uptime: String
  download: String
  upload: String
}
type ClientComment {
  comment: String
}
type ActiveClients {
  name: String
}

scalar Date

type Mutation {
  createClient(input: ClientInput): SimpleResponse
  editClient(input: EditClientInput): SimpleResponse
  editClientPlan(input: EditClientPlanInput): SimpleResponse
  deleteClient(id: ID): SimpleResponse
  getClientStatus(id: ID): ClientStatus
  getClientComment(id: ID): ClientComment
  createCity(input: CityInput): SimpleResponse
  updateCity(input: CityInput): SimpleResponse
  deleteCity(id: Int): SimpleResponse
  createNeighborhood(input: NeighborhoodInput): SimpleResponse
  updateNeighborhood(input: NeighborhoodInput): SimpleResponse
  deleteNeighborhood(id: Int): SimpleResponse
  createPlan(input: PlanInput): SimpleResponse
  updatePlan(input: PlanInput): SimpleResponse
  deletePlan(id: Int): SimpleResponse
  createTechnology(input: TechnologyInput): SimpleResponse
  updateTechnology(input: TechnologyInput): SimpleResponse
  deleteTechnology(id: Int): SimpleResponse
  createUser(input: UserInput): Response
  login(input: LoginInput): Response
}
input ClientInput {
  code: Int
  name: String
  dni: String
  address: String
  neighborhood: Int
  city: Int
  phone: String
  plan: Int
  wifi_ssid: String
  wifi_password: String
  technology: Int
  mac_address: String
  comment: String
  operator: Int
  newModel: Int
  sendToMikrotik: Boolean
}
input EditClientInput {
  _id: String
  code: Int
  name: String
  dni: String
  address: String
  neighborhood: Int
  city: Int
  phone: String
  plan: Int
  wifi_ssid: String
  wifi_password: String
  technology: Int
  mac_address: String
  comment: String
  operator: Int
  newModel: Int
}
input EditClientPlanInput {
  id: String
  plan: Int
  model: Int
}
input CityInput {
  id: Int
  name: String
  ip: String
  color: String
}
input NeighborhoodInput {
  id: Int
  name: String
}
input PlanInput {
  id: Int
  name: String
  mikrotik_name: String
}
input TechnologyInput {
  id: Int
  name: String
}
input UserInput {
  username: String!
  email: String
  password: String!
  date: String
  role: Int
}
input LoginInput {
  username: String!
  password: String!
}